# ------------- MedConsultant v8 (—Å –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã) -------------
import io, base64, datetime, json, os, sys, tempfile, uuid, subprocess, glob, re
import streamlit as st
import openai
import fitz  # PyMuPDF
import docx
from docx.shared import Pt, RGBColor
from docx2pdf import convert
from PIL import Image
import pydicom

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API‚Äë–∫–ª—é—á–∞ ----------
# –ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ Streamlit Secrets, –ø–æ—Ç–æ–º ‚Äî –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    st.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY. –ó–∞–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ Streamlit Cloud –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenAI (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å openai.api_key)
openai_client = openai.OpenAI()

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ----------
MODEL = "gpt-4o"
TEMPERATURE = 0.35
MAX_TOKENS = 4000
THEME = RGBColor(0, 102, 204)

# ---------- UI ----------
st.set_page_config("MedConsultant ü©∫", page_icon="ü©∫", layout="wide")
st.title("ü©∫ MedConsultant ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")

st.sidebar.header("üßë‚Äç‚öïÔ∏è –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_name = st.sidebar.text_input("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_age = st.sidebar.text_input("–í–æ–∑—Ä–∞—Å—Ç")
patient_sex = st.sidebar.selectbox("–ü–æ–ª", ["", "–ú", "–ñ"])

# ---------- –°–µ—Å—Å–∏—è ----------
if "files" not in st.session_state:
    st.session_state.files = {}


# ---------- –ù–û–í–´–ô –•–ï–õ–ü–ï–†: –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã ----------
def extract_date_from_file(fname: str, data: bytes) -> datetime.date | None:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –∑–∞—Ç–µ–º –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""

    # 1. –ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ì–ì–ì–ì-–ú–ú-–î–î, –î–î.–ú–ú.–ì–ì–ì–ì, –î–î-–ú–ú-–ì–ì–ì–ì –∏ —Ç.–¥.
    patterns = [
        r'(\d{4})[._-](\d{2})[._-](\d{2})',  # 2025-07-02
        r'(\d{2})[._-](\d{2})[._-](\d{4})'  # 02-07-2025
    ]
    for pattern in patterns:
        match = re.search(pattern, fname)
        if match:
            try:
                parts = match.groups()
                if len(parts[0]) == 4:  # –ì–ì–ì–ì-–ú–ú-–î–î
                    year, month, day = map(int, parts)
                else:  # –î–î-–ú–ú-–ì–ì–ì–ì
                    day, month, year = map(int, parts)
                return datetime.date(year, month, day)
            except ValueError:
                continue

    # 2. –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞—à–ª–∏)
    ext = fname.lower().split('.')[-1]
    try:
        if ext == "pdf":
            with fitz.open(stream=data, filetype="pdf") as doc:
                meta = doc.metadata
                date_str = meta.get('creationDate') or meta.get('modDate')
                if date_str:  # –§–æ—Ä–º–∞—Ç D:YYYYMMDD...
                    return datetime.datetime.strptime(date_str[2:10], "%Y%m%d").date()
        elif ext == "docx":
            with io.BytesIO(data) as docx_io:
                doc = docx.Document(docx_io)
                return doc.core_properties.created.date()
        elif ext == "dcm":
            with io.BytesIO(data) as dcm_io:
                dcm = pydicom.dcmread(dcm_io)
                date_str = dcm.get("StudyDate") or dcm.get("AcquisitionDate")
                if date_str:
                    return datetime.datetime.strptime(date_str, "%Y%m%d").date()
    except Exception:
        return None  # –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

    return None  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------
uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥‚Äë—Ñ–∞–π–ª—ã (PDF, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, DICOM‚Ä¶)",
    accept_multiple_files=True
)
if uploaded:
    for f in uploaded:
        if f.name not in st.session_state.files:
            file_data = f.read()
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ - —Å—Ç–∞–≤–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
            guessed_date = extract_date_from_file(f.name, file_data) or datetime.date.today()
            st.session_state.files[f.name] = {
                "data": file_data,
                "note": "",
                "date": guessed_date  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≥–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É
            }

# ---------- –§–∞–π–ª—ã, –∑–∞–º–µ—Ç–∫–∏ –∏ –¥–∞—Ç—ã (—Å —Ä—É—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π) ----------
if st.session_state.files:
    st.subheader("üìÅ –§–∞–π–ª—ã, –∑–∞–º–µ—Ç–∫–∏ –∏ –¥–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤")
    st.info("‚ÑπÔ∏è –î–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é.")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–∏–Ω–∞–º–∏–∫–µ
    sorted_files = sorted(st.session_state.files.items(), key=lambda item: item[1]['date'])
    st.session_state.files = dict(sorted_files)

    for fname, meta in st.session_state.files.items():
        with st.expander(f"{fname} (–¥–∞—Ç–∞: {meta['date']:%d.%m.%Y})", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                meta["date"] = st.date_input(
                    "–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å)",
                    value=meta["date"],
                    key=f"date_{fname}"
                )
            with col2:
                meta["note"] = st.text_area(
                    "–ó–∞–º–µ—Ç–∫–∞ –∫ —Ñ–∞–π–ª—É (–ù–ï –ø–æ–ø–∞–¥—ë—Ç –≤ –æ—Ç—á—ë—Ç)",
                    meta["note"],
                    key=f"note_{fname}",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —ç—Ç–æ —Å—Ü–∏–Ω—Ç–∏–≥—Ä–∞—Ñ–∏—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏."
                )

st.markdown("---")
global_note = st.text_area(
    "üìù –û–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –æ—Ç—á—ë—Ç)",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—á–µ–∫, —Å—Ä–∞–≤–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –º–µ—Å—è—Ü–∞..."
)


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (process_file, integrated_analysis, build_docx, docx_to_pdf) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π... ----------
# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ process_file, integrated_analysis, build_docx, docx_to_pdf –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
def process_file(fname: str, data: bytes) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤."""
    ext = fname.lower().split('.')[-1]
    text_content = ""
    images_base64 = []

    try:
        if ext == "pdf":
            doc = fitz.open(stream=data, filetype="pdf")
            for page in doc:
                text_content += page.get_text() + "\n"
                for img_instance in page.get_images(full=True):
                    xref = img_instance[0]
                    base_image = doc.extract_image(xref)
                    image_bytes = base_image["image"]
                    images_base64.append(base64.b64encode(image_bytes).decode('utf-8'))
            doc.close()

        elif ext == "docx":
            doc = docx.Document(io.BytesIO(data))
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            for para in doc.paragraphs:
                text_content += para.text + "\n"
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for rel in doc.part.rels.values():
                if "image" in rel.target_ref:
                    image_bytes = rel.target_part.blob
                    images_base64.append(base64.b64encode(image_bytes).decode('utf-8'))

        elif ext in ("txt", "csv", "md"):
            text_content = data.decode(errors="ignore")

        elif ext == "dcm":
            dcm = pydicom.dcmread(io.BytesIO(data))
            text_content = str(dcm)  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            if hasattr(dcm, "pixel_array"):
                img = Image.fromarray(dcm.pixel_array).convert("L")
                buf = io.BytesIO()
                img.save(buf, format="PNG")
                images_base64.append(base64.b64encode(buf.getvalue()).decode('utf-8'))

        elif ext in ("png", "jpg", "jpeg", "tiff", "bmp", "gif"):
            images_base64.append(base64.b64encode(data).decode('utf-8'))

    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {fname}: {e}")

    return {"text": text_content, "images": images_base64}


def integrated_analysis() -> str:
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞–º–µ—Ç–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏."""
    header = (
        f"–ü–∞—Ü–∏–µ–Ω—Ç: {patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}.\n"
        "–í—ã ‚Äî –≤–µ–¥—É—â–∏–π –≤—Ä–∞—á‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 20‚Äë–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:\n"
        "1.  **–ê–Ω–∞–ª–∏–∑ –≤ –¥–∏–Ω–∞–º–∏–∫–µ:** –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã. –û—Ç–º–µ—á–∞–π—Ç–µ –ª—é–±—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ (—É–ª—É—á—à–µ–Ω–∏–µ, —É—Ö—É–¥—à–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å).\n"
        "2.  **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥—Ä–∞—Ñ–∏–∫–∏, —Å–Ω–∏–º–∫–∏, –¥–∏–∞–≥—Ä–∞–º–º—ã). –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞ –Ω–∏—Ö –≤–∏–¥–∏—Ç–µ, –∏ –∫–∞–∫ —ç—Ç–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n"
        "3.  **–ì–ª—É–±–∏–Ω–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –û–±—ä—è—Å–Ω—è–π—Ç–µ —Å–≤–æ–∏ –≤—ã–≤–æ–¥—ã, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ö.\n\n"
        "–°–§–û–†–ú–ò–†–£–ô–¢–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–†–û–ì–û –ü–û –°–¢–†–£–ö–¢–£–†–ï:\n"
        "1) –ü—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑—ã (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏).\n"
        "2) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö).\n"
        "3) –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ).\n"
        "4) –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã, –¥–æ–∑–∏—Ä–æ–≤–∫–∏, –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞).\n"
        "5) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–ª–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤).\n\n"
        "–ó–ê–ü–†–ï–©–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ (‚Ä¢, -, *), —ç–º–æ–¥–∑–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï, —Ñ—Ä–∞–∑—ã ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É¬ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ –≤—ã –ò–ò."
    )

    messages = [{"role": "system", "content": header}]
    user_content = []

    if global_note.strip():
        user_content.append({"type": "text", "text": f"–û–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –æ—Ç –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞: {global_note.strip()}"})

    for fname, meta in st.session_state.files.items():
        file_date = meta['date'].strftime('%d.%m.%Y')
        file_note = meta['note'].strip()

        file_header = f"=== –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {fname} (–¥–∞—Ç–∞: {file_date}) ===\n"
        if file_note:
            file_header += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É: {file_note}\n"

        processed_file = process_file(fname, meta["data"])
        file_text = processed_file['text'].strip()

        if file_text:
            user_content.append({"type": "text", "text": file_header + file_text[:20000]})
        else:
            user_content.append(
                {"type": "text", "text": file_header + "(–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, —Å–º. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∂–µ)"})

        for img_b64 in processed_file['images']:
            user_content.append({
                "type": "image_url",
                "image_url": {"url": f"data:image/png;base64,{img_b64}"}
            })

    if not user_content:
        user_content.append({"type": "text", "text": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."})

    messages.append({"role": "user", "content": user_content})

    resp = openai_client.chat.completions.create(
        model=MODEL,
        messages=messages,
        temperature=TEMPERATURE,
        max_tokens=MAX_TOKENS
    )
    return resp.choices[0].message.content.strip()


def build_docx(text: str) -> bytes:
    doc = docx.Document()
    p = doc.add_paragraph()
    r = p.add_run("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
    r.bold = True;
    r.font.size = Pt(22);
    r.font.color.rgb = THEME
    doc.add_paragraph(f"{datetime.datetime.now():%d.%m.%Y %H:%M}")
    doc.add_paragraph(f"–ü–∞—Ü–∏–µ–Ω—Ç: {patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}")
    doc.add_paragraph().add_run("‚ïê" * 40)

    for line in text.splitlines():
        doc.add_paragraph(line.strip())

    buf = io.BytesIO()
    doc.save(buf)
    return buf.getvalue()


def docx_to_pdf(docx_bytes: bytes) -> bytes:
    with tempfile.TemporaryDirectory() as tmp:
        docx_path = os.path.join(tmp, f"{uuid.uuid4()}.docx")
        with open(docx_path, "wb") as f:
            f.write(docx_bytes)
        try:
            convert(docx_path, tmp)
            pdf_paths = glob.glob(os.path.join(tmp, "*.pdf"))
            if not pdf_paths:
                raise FileNotFoundError("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return open(pdf_paths[0], "rb").read()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MS Word –∏–ª–∏ LibreOffice.")
            st.stop()


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ----------
def generate_report(to_pdf: bool):
    if not st.session_state.files:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    with st.spinner("–ò–ò –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."):
        result_text = integrated_analysis()

    st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")
    st.markdown("### –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:")
    st.text_area("–¢–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞", result_text, height=600)

    docx_bytes = build_docx(result_text)

    col1, col2, _ = st.columns([1, 1, 3])

    with col1:
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å DOCX",
            docx_bytes,
            f"MedConsultant_Report_{patient_name or 'P'}.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            key="docx_download"
        )

    if to_pdf:
        with st.spinner("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF..."):
            pdf_bytes = docx_to_pdf(docx_bytes)
            with col2:
                st.download_button(
                    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF",
                    pdf_bytes,
                    f"MedConsultant_Report_{patient_name or 'P'}.pdf",
                    mime="application/pdf",
                    key="pdf_download"
                )


# ---------- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ----------
st.markdown("---")
st.subheader("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
col1, col2 = st.columns(2)
with col1:
    if st.button("üìÑ –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å DOCX‚Äë–æ—Ç—á—ë—Ç", type="primary"):
        generate_report(False)
with col2:
    if st.button("üìë –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å PDF‚Äë–æ—Ç—á—ë—Ç"):
        generate_report(True)