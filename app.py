# ------------- MedConsultant v6 (—Å Streamlit Secrets) -------------
import io, base64, datetime, json, os, sys, tempfile, uuid, subprocess, glob
import streamlit as st
import openai
from PyPDF2 import PdfReader
import docx2txt
from docx import Document
from docx.shared import Pt, RGBColor
from docx2pdf import convert
from PIL import Image
import pydicom

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API‚Äë–∫–ª—é—á–∞ ----------
# –ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ Streamlit Secrets, –ø–æ—Ç–æ–º ‚Äî –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    st.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY. –ó–∞–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ Streamlit Cloud –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenAI (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å openai.api_key)
openai_client = openai.OpenAI()

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ----------
MODEL       = "gpt-4o-mini"
TEMPERATURE = 0.35
MAX_TOKENS  = 1800
THEME       = RGBColor(0, 102, 204)

# ---------- UI ----------
st.set_page_config("MedConsultant ü©∫", page_icon="ü©∫", layout="wide")
st.title("ü©∫ MedConsultant ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")

st.sidebar.header("üßë‚Äç‚öïÔ∏è –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_name = st.sidebar.text_input("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_age  = st.sidebar.text_input("–í–æ–∑—Ä–∞—Å—Ç")
patient_sex  = st.sidebar.selectbox("–ü–æ–ª", ["", "–ú", "–ñ"])

# ---------- –°–µ—Å—Å–∏—è ----------
if "files" not in st.session_state:
    st.session_state.files = {}   # {–∏–º—è —Ñ–∞–π–ª–∞: {"data":bytes, "note":str}}

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------
uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥‚Äë—Ñ–∞–π–ª—ã (PDF, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, DICOM‚Ä¶)",
    accept_multiple_files=True
)
if uploaded:
    for f in uploaded:
        st.session_state.files[f.name] = {"data": f.read(), "note": ""}

# ---------- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ----------
if st.session_state.files:
    st.subheader("üìÅ –§–∞–π–ª—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –ò–ò)")
    for fname, meta in st.session_state.files.items():
        with st.expander(fname, expanded=False):
            meta["note"] = st.text_area(
                "–ó–∞–º–µ—Ç–∫–∞ (–ù–ï –ø–æ–ø–∞–¥—ë—Ç –≤ –æ—Ç—á—ë—Ç)",
                meta["note"],
                key=f"note_{fname}"
            )

st.markdown("---")
global_note = st.text_area(
    "üìù –û–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –æ—Ç—á—ë—Ç)",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—á–µ–∫‚Ä¶"
)

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def extract_text(fname: str, data: bytes):
    ext = fname.lower().split('.')[-1]
    if ext == "pdf":
        reader = PdfReader(io.BytesIO(data))
        return "\n".join(page.extract_text() or "" for page in reader.pages)
    if ext in ("docx", "doc"):
        return docx2txt.process(io.BytesIO(data))
    if ext in ("txt", "csv", "md"):
        return data.decode(errors="ignore")
    if ext == "dcm":
        dcm = pydicom.dcmread(io.BytesIO(data))
        if hasattr(dcm, "pixel_array"):
            img = Image.fromarray(dcm.pixel_array)
            buf = io.BytesIO(); img.save(buf, format="PNG"); data = buf.getvalue()
    if ext in ("png", "jpg", "jpeg", "tiff", "bmp", "gif"):
        return {"img": base64.b64encode(data).decode()}
    return ""

def integrated_analysis() -> str:
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏."""
    header = (
        f"–ü–∞—Ü–∏–µ–Ω—Ç: {patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}.\n"
        "–í—ã ‚Äî –≤–µ–¥—É—â–∏–π –≤—Ä–∞—á‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 20‚Äë–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º.\n"
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n"
        "1) –ü—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n"
        "2) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º\n"
        "3) –ù–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ (–¥–æ–∑—ã, –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)\n"
        "4) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –¥–æ–ø. –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Å—Ä–æ–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è)\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ä–∫–µ—Ä—ã, —ç–º–æ–¥–∑–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ CAPS, —Ñ—Ä–∞–∑—ã ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å¬ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò.\n"
    )

    text_block = ""
    vision_blocks = []
    for fname, meta in st.session_state.files.items():
        extracted = extract_text(fname, meta["data"])
        note = meta["note"].strip()
        if isinstance(extracted, dict):  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if note:
                vision_blocks.append({"type": "text", "text": note})
            vision_blocks.append({
                "type": "image_url",
                "image_url": {"url": "data:image/png;base64," + extracted["img"]}
            })
        else:
            text_block += f"\n=== {fname} ===\n"
            if note:
                text_block += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä–∞—á–∞: {note}\n"
            text_block += extracted[:15000] + "\n"

    if global_note:
        text_block = "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è: " + global_note + "\n" + text_block

    messages = [
        {"role": "system", "content": header},
        {"role": "user",   "content": text_block.strip() or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
    ]
    if vision_blocks:
        messages.append({"role": "user", "content": vision_blocks})

    resp = openai_client.chat.completions.create(
        model=MODEL,
        messages=messages,
        temperature=TEMPERATURE,
        max_tokens=MAX_TOKENS
    )
    return resp.choices[0].message.content.strip()

def build_docx(text: str) -> bytes:
    doc = Document()
    p = doc.add_paragraph()
    r = p.add_run("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
    r.bold = True; r.font.size = Pt(22); r.font.color.rgb = THEME
    doc.add_paragraph(f"{datetime.datetime.now():%d.%m.%Y %H:%M}")
    doc.add_paragraph(f"{patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}")
    doc.add_paragraph().add_run("‚ïê" * 40)

    for line in text.splitlines():
        doc.add_paragraph(line.strip())

    buf = io.BytesIO()
    doc.save(buf)
    return buf.getvalue()

def docx_to_pdf(docx_bytes: bytes) -> bytes:
    with tempfile.TemporaryDirectory() as tmp:
        docx_path = os.path.join(tmp, f"{uuid.uuid4()}.docx")
        with open(docx_path, "wb") as f:
            f.write(docx_bytes)
        convert(docx_path, tmp)
        pdf_path = glob.glob(os.path.join(tmp, "*.pdf"))[0]
        return open(pdf_path, "rb").read()

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ ----------
def generate_report(to_pdf: bool):
    if not st.session_state.files:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶"):
        result_text = integrated_analysis()

    docx_bytes = build_docx(result_text)
    if to_pdf:
        try:
            pdf_bytes = docx_to_pdf(docx_bytes)
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF‚Äë–æ—Ç—á—ë—Ç",
                pdf_bytes,
                "MedConsultant_Report.pdf",
                mime="application/pdf"
            )
        except Exception as e:
            st.error(f"PDF –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
    else:
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å DOCX‚Äë–æ—Ç—á—ë—Ç",
            docx_bytes,
            "MedConsultant_Report.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

col1, col2 = st.columns(2)
with col1:
    if st.button("üìÑ DOCX‚Äë–æ—Ç—á—ë—Ç"):
        generate_report(False)
with col2:
    if st.button("üìë PDF‚Äë–æ—Ç—á—ë—Ç"):
        generate_report(True)
