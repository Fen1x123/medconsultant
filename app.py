# ------------- MedConsultant v7 PRO (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) -------------
import io, base64, datetime, json, os, sys, tempfile, uuid, subprocess, glob
import streamlit as st
import openai
import fitz  # PyMuPDF –¥–ª—è –ª—É—á—à–µ–π —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ PDF
import docx2txt
from docx import Document
from docx.shared import Pt, RGBColor
from docx2pdf import convert
from PIL import Image
import pydicom

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API‚Äë–∫–ª—é—á–∞ ----------
openai.api_key = st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    st.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY. –ó–∞–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç –≤ Streamlit Cloud –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    st.stop()

openai_client = openai.OpenAI()

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
THEME = RGBColor(0, 102, 204)
DEFAULT_MODEL = "gpt-4o"
MODEL_LIST = ["gpt-4o", "gpt-4o-mini", "gpt-4.0", "gpt-3.5-turbo"]

st.set_page_config("MedConsultant ü©∫", page_icon="ü©∫", layout="wide")
st.title("ü©∫ MedConsultant ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")

st.sidebar.header("üßë‚Äç‚öïÔ∏è –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_name = st.sidebar.text_input("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patient_age = st.sidebar.text_input("–í–æ–∑—Ä–∞—Å—Ç")
patient_sex = st.sidebar.selectbox("–ü–æ–ª", ["", "–ú", "–ñ"])
model = st.sidebar.selectbox("–ú–æ–¥–µ–ª—å LLM", MODEL_LIST, index=MODEL_LIST.index(DEFAULT_MODEL))
max_tokens = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç", 1024, 4096, 3072, step=256)
temperature = st.sidebar.slider("Temperature", 0.0, 1.2, 0.35, step=0.05)

if "files" not in st.session_state:
    st.session_state.files = {}

uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥‚Äë—Ñ–∞–π–ª—ã (PDF, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, DICOM‚Ä¶)",
    accept_multiple_files=True
)
if uploaded:
    for f in uploaded:
        st.session_state.files[f.name] = {"data": f.read(), "note": ""}

if st.session_state.files:
    st.subheader("üìÅ –§–∞–π–ª—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –ò–ò)")
    for fname, meta in st.session_state.files.items():
        with st.expander(fname, expanded=False):
            meta["note"] = st.text_area(
                "–ó–∞–º–µ—Ç–∫–∞ (–ù–ï –ø–æ–ø–∞–¥—ë—Ç –≤ –æ—Ç—á—ë—Ç)",
                meta["note"],
                key=f"note_{fname}"
            )

st.markdown("---")
global_note = st.text_area(
    "üìù –û–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ù–ï –ø–æ–ø–∞–¥—É—Ç –≤ –æ—Ç—á—ë—Ç)",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—á–µ–∫‚Ä¶"
)

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤"""
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    # —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ª–∏—à–Ω–∏–µ —à–∞–ø–∫–∏
    out = []
    for line in lines:
        if line and not line.startswith("–°—Ç—Ä–∞–Ω–∏—Ü–∞") and not line.startswith("‚Äî"*5):
            out.append(line)
    return "\n".join(out)

def extract_text(fname: str, data: bytes):
    ext = fname.lower().split('.')[-1]
    if ext == "pdf":
        # –°–Ω–∞—á–∞–ª–∞ PyMuPDF
        try:
            doc = fitz.open("pdf", data)
            text = ""
            for page in doc:
                text += page.get_text()
            if not text.strip():
                raise Exception("No text with fitz")
            return clean_text(text)
        except Exception:
            # Fallback –Ω–∞ PyPDF2
            from PyPDF2 import PdfReader
            reader = PdfReader(io.BytesIO(data))
            return clean_text("\n".join(page.extract_text() or "" for page in reader.pages))
    if ext in ("docx", "doc"):
        return clean_text(docx2txt.process(io.BytesIO(data)))
    if ext in ("txt", "csv", "md"):
        return data.decode(errors="ignore")
    if ext == "dcm":
        dcm = pydicom.dcmread(io.BytesIO(data))
        if hasattr(dcm, "pixel_array"):
            img = Image.fromarray(dcm.pixel_array)
            buf = io.BytesIO(); img.save(buf, format="PNG"); data = buf.getvalue()
    if ext in ("png", "jpg", "jpeg", "tiff", "bmp", "gif"):
        return {"img": base64.b64encode(data).decode()}
    return ""

def integrated_analysis() -> str:
    """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏."""
    header = (
        f"–ü–∞—Ü–∏–µ–Ω—Ç: {patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}.\n"
        "–í—ã ‚Äî –≤–µ–¥—É—â–∏–π –≤—Ä–∞—á‚Äë–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 20‚Äë–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º.\n"
        "–°–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n"
        "1) –ü—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã\n"
        "2) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º\n"
        "3) –ù–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ (–¥–æ–∑—ã, –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)\n"
        "4) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –¥–æ–ø. –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Å—Ä–æ–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è)\n"
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Ä–∫–µ—Ä—ã, —ç–º–æ–¥–∑–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ CAPS, —Ñ—Ä–∞–∑—ã ¬´–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å¬ª –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò.\n"
    )

    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ‚Äî –≤—Å–µ –≤ –æ–¥–Ω–æ–º user‚Äë–±–ª–æ–∫–µ
    content_blocks = [{"type": "text", "text": header}]
    for fname, meta in st.session_state.files.items():
        extracted = extract_text(fname, meta["data"])
        note = meta["note"].strip()
        if isinstance(extracted, dict):  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if note:
                content_blocks.append({"type": "text", "text": f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ({fname}): {note}"})
            content_blocks.append({
                "type": "image_url",
                "image_url": {
                    "url": "data:image/png;base64," + extracted["img"],
                    "detail": "high"
                }
            })
        else:
            block = f"\n=== {fname} ===\n"
            if note:
                block += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä–∞—á–∞: {note}\n"
            block += extracted[:16000] + "\n"
            content_blocks.append({"type": "text", "text": block})

    if global_note:
        content_blocks.insert(1, {"type": "text", "text": "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è: " + global_note})

    messages = [
        {"role": "user", "content": content_blocks}
    ]

    resp = openai_client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens
    )
    return resp.choices[0].message.content.strip()

def build_docx(text: str) -> bytes:
    doc = Document()
    p = doc.add_paragraph()
    r = p.add_run("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")
    r.bold = True; r.font.size = Pt(22); r.font.color.rgb = THEME
    doc.add_paragraph(f"{datetime.datetime.now():%d.%m.%Y %H:%M}")
    doc.add_paragraph(f"{patient_name or '‚Äî'}, {patient_age or '‚Äî'} –ª–µ—Ç, –ø–æ–ª: {patient_sex or '‚Äî'}")
    doc.add_paragraph().add_run("‚ïê" * 40)
    for line in text.splitlines():
        doc.add_paragraph(line.strip())
    buf = io.BytesIO()
    doc.save(buf)
    return buf.getvalue()

def docx_to_pdf(docx_bytes: bytes) -> bytes:
    with tempfile.TemporaryDirectory() as tmp:
        docx_path = os.path.join(tmp, f"{uuid.uuid4()}.docx")
        with open(docx_path, "wb") as f:
            f.write(docx_bytes)
        convert(docx_path, tmp)
        pdf_path = glob.glob(os.path.join(tmp, "*.pdf"))[0]
        return open(pdf_path, "rb").read()

def generate_report(to_pdf: bool):
    if not st.session_state.files:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Ä¶"):
        result_text = integrated_analysis()
    docx_bytes = build_docx(result_text)
    if to_pdf:
        try:
            pdf_bytes = docx_to_pdf(docx_bytes)
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF‚Äë–æ—Ç—á—ë—Ç",
                pdf_bytes,
                "MedConsultant_Report.pdf",
                mime="application/pdf"
            )
        except Exception as e:
            st.error(f"PDF –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
    else:
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å DOCX‚Äë–æ—Ç—á—ë—Ç",
            docx_bytes,
            "MedConsultant_Report.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )

col1, col2 = st.columns(2)
with col1:
    if st.button("üìÑ DOCX‚Äë–æ—Ç—á—ë—Ç"):
        generate_report(False)
with col2:
    if st.button("üìë PDF‚Äë–æ—Ç—á—ë—Ç"):
        generate_report(True)
